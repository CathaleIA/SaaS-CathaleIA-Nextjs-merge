{"version":3,"file":"setup-totp.component.d.ts","sources":["setup-totp.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { FormFieldsArray } from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nexport declare class SetupTotpComponent implements OnInit {\n    authenticator: AuthenticatorService;\n    dataAttr: string;\n    headerText: string;\n    qrCodeSource: string;\n    secretKey: string;\n    copyTextLabel: string;\n    backToSignInText: string;\n    confirmText: string;\n    sortedFormFields: FormFieldsArray;\n    constructor(authenticator: AuthenticatorService);\n    ngOnInit(): Promise<void>;\n    get context(): {\n        $implicit: {\n            signOut: (data?: Record<string | number | symbol, any>) => void;\n            initializeMachine: (data?: Record<string | number | symbol, any>) => void;\n            resendCode: (data?: Record<string | number | symbol, any>) => void;\n            submitForm: (data?: Record<string | number | symbol, any>) => void;\n            updateForm: (data?: Record<string | number | symbol, any>) => void;\n            updateBlur: (data?: Record<string | number | symbol, any>) => void;\n            toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;\n            toResetPassword: (data?: Record<string | number | symbol, any>) => void;\n            toSignIn: (data?: Record<string | number | symbol, any>) => void;\n            toSignUp: (data?: Record<string | number | symbol, any>) => void;\n            skipVerification: (data?: Record<string | number | symbol, any>) => void;\n            authStatus: \"authenticated\" | \"configuring\" | \"unauthenticated\";\n            codeDeliveryDetails: import(\"@aws-amplify/ui\").CodeDeliveryDetails;\n            error: string;\n            hasValidationErrors: boolean;\n            isPending: boolean;\n            route: import(\"@aws-amplify/ui\").AuthenticatorRoute;\n            socialProviders: import(\"@aws-amplify/ui\").SocialProvider[];\n            unverifiedContactMethods: import(\"@aws-amplify/ui\").UnverifiedContactMethods;\n            user: import(\"@aws-amplify/ui\").AmplifyUser;\n            validationErrors: Record<string, string | string[]>;\n        };\n        signOut: (data?: Record<string | number | symbol, any>) => void;\n        initializeMachine: (data?: Record<string | number | symbol, any>) => void;\n        resendCode: (data?: Record<string | number | symbol, any>) => void;\n        submitForm: (data?: Record<string | number | symbol, any>) => void;\n        updateForm: (data?: Record<string | number | symbol, any>) => void;\n        updateBlur: (data?: Record<string | number | symbol, any>) => void;\n        toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;\n        toResetPassword: (data?: Record<string | number | symbol, any>) => void;\n        toSignIn: (data?: Record<string | number | symbol, any>) => void;\n        toSignUp: (data?: Record<string | number | symbol, any>) => void;\n        skipVerification: (data?: Record<string | number | symbol, any>) => void;\n        authStatus: \"authenticated\" | \"configuring\" | \"unauthenticated\";\n        codeDeliveryDetails: import(\"@aws-amplify/ui\").CodeDeliveryDetails;\n        error: string;\n        hasValidationErrors: boolean;\n        isPending: boolean;\n        route: import(\"@aws-amplify/ui\").AuthenticatorRoute;\n        socialProviders: import(\"@aws-amplify/ui\").SocialProvider[];\n        unverifiedContactMethods: import(\"@aws-amplify/ui\").UnverifiedContactMethods;\n        user: import(\"@aws-amplify/ui\").AmplifyUser;\n        validationErrors: Record<string, string | string[]>;\n    };\n    generateQRCode(): Promise<void>;\n    onInput(event: Event): void;\n    onSubmit(event: Event): void;\n    copyText(): void;\n}\n"]}