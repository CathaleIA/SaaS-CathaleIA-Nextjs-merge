{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport { BaseChartDirective } from 'ng2-charts';\nimport DataLabelsPlugin from 'chartjs-plugin-datalabels';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/grid-list\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/menu\";\nimport * as i8 from \"ng2-charts\";\n\nfunction DashboardComponent_mat_grid_tile_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 4)(1, \"mat-card\", 5)(2, \"mat-card-header\")(3, \"mat-card-title\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"button\", 6)(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"more_vert\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"mat-menu\", 7, 8)(10, \"button\", 9);\n    i0.ɵɵtext(11, \"Expand\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 9);\n    i0.ɵɵtext(13, \"Remove\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(14, \"mat-card-content\")(15, \"div\", 10);\n    i0.ɵɵelement(16, \"canvas\", 11);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n\n    const _r2 = i0.ɵɵreference(9);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"colspan\", card_r1.cols)(\"rowspan\", card_r1.rows);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", card_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r2);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"data\", ctx_r0.barChartData)(\"options\", ctx_r0.barChartOptions)(\"plugins\", ctx_r0.barChartPlugins)(\"type\", ctx_r0.barChartType);\n  }\n}\n\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(breakpointObserver) {\n      this.breakpointObserver = breakpointObserver;\n      this.barChartOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        // We use these empty structures as placeholders for dynamic theming.\n        scales: {\n          x: {},\n          y: {\n            min: 10\n          }\n        },\n        plugins: {\n          legend: {\n            display: true\n          },\n          datalabels: {\n            anchor: 'end',\n            align: 'end'\n          }\n        }\n      };\n      this.barChartType = 'bar';\n      this.barChartPlugins = [DataLabelsPlugin];\n      this.barChartData = {\n        labels: ['2006', '2007', '2008', '2009', '2010', '2011', '2012'],\n        datasets: [{\n          data: [65, 59, 80, 81, 56, 55, 40],\n          label: 'Series A'\n        }, {\n          data: [28, 48, 40, 19, 86, 27, 90],\n          label: 'Series B'\n        }]\n      };\n      /** Based on the screen size, switch from standard to one column per row */\n\n      this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(({\n        matches\n      }) => {\n        if (matches) {\n          return [{\n            title: 'Card 1',\n            cols: 1,\n            rows: 1\n          }, {\n            title: 'Card 2',\n            cols: 1,\n            rows: 1\n          }, {\n            title: 'Card 3',\n            cols: 1,\n            rows: 1\n          }, {\n            title: 'Card 4',\n            cols: 1,\n            rows: 1\n          }];\n        }\n\n        return [{\n          title: 'Card 1',\n          cols: 2,\n          rows: 1\n        }, {\n          title: 'Card 2',\n          cols: 1,\n          rows: 1\n        }, {\n          title: 'Card 3',\n          cols: 1,\n          rows: 2\n        }, {\n          title: 'Card 4',\n          cols: 1,\n          rows: 1\n        }];\n      }));\n    } // events\n\n\n    chartClicked({\n      event,\n      active\n    }) {}\n\n    chartHovered({\n      event,\n      active\n    }) {}\n\n    randomize() {\n      // Only Change 3 values\n      this.barChartData.datasets[0].data = [Math.round(Math.random() * 100), 59, 80, Math.round(Math.random() * 100), 56, Math.round(Math.random() * 100), 40];\n      this.chart?.update();\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 3,\n    consts: [[1, \"grid-container\"], [1, \"mat-h1\"], [\"cols\", \"2\", \"rowHeight\", \"350px\"], [3, \"colspan\", \"rowspan\", 4, \"ngFor\", \"ngForOf\"], [3, \"colspan\", \"rowspan\"], [1, \"dashboard-card\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Toggle menu\", 1, \"more-button\", 3, \"matMenuTriggerFor\"], [\"xPosition\", \"before\"], [\"menu\", \"matMenu\"], [\"mat-menu-item\", \"\"], [1, \"chart-wrapper\", \"chart-container\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"plugins\", \"type\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-grid-list\", 2);\n        i0.ɵɵtemplate(4, DashboardComponent_mat_grid_tile_4_Template, 17, 8, \"mat-grid-tile\", 3);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 1, ctx.cards));\n      }\n    },\n    dependencies: [i2.NgForOf, i3.MatButton, i4.MatCard, i4.MatCardHeader, i4.MatCardContent, i4.MatCardTitle, i5.MatGridList, i5.MatGridTile, i6.MatIcon, i7.MatMenu, i7.MatMenuItem, i7.MatMenuTrigger, i8.BaseChartDirective, i2.AsyncPipe],\n    styles: [\".grid-container[_ngcontent-%COMP%]{margin:20px}.dashboard-card[_ngcontent-%COMP%]{position:absolute;inset:15px}.more-button[_ngcontent-%COMP%]{position:absolute;top:5px;right:10px;border:none}.dashboard-card-content[_ngcontent-%COMP%]{text-align:center}\"]\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}