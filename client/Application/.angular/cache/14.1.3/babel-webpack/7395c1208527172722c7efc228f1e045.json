{"ast":null,"code":"/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\n * software and associated documentation files (the \"Software\"), to deal in the Software\n * without restriction, including without limitation the rights to use, copy, modify,\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nimport { HttpClient } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport Amplify from 'aws-amplify';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthConfigurationService = /*#__PURE__*/(() => {\n  class AuthConfigurationService {\n    constructor(http, route, router) {\n      this.http = http;\n      this.route = route;\n      this.router = router;\n    }\n\n    setTenantConfig(tenantName) {\n      const url = `${environment.regApiGatewayUrl}/tenant/init/` + tenantName;\n      this.params$ = this.http.get(url);\n      const setup$ = this.params$.pipe(map(val => {\n        // remove trailing slash (/) if present\n        val.apiGatewayUrl = val.apiGatewayUrl.replace(/\\/$/, '');\n        localStorage.setItem('userPoolId', val.userPoolId);\n        localStorage.setItem('tenantName', tenantName);\n        localStorage.setItem('appClientId', val.appClientId);\n        localStorage.setItem('apiGatewayUrl', val.apiGatewayUrl);\n        return 'success';\n      }), catchError(error => {\n        console.log('Error setting tenant config: ', error);\n        return throwError(error);\n      }));\n      return setup$.toPromise();\n    }\n\n    configureAmplifyAuth() {\n      try {\n        const userPoolId = localStorage.getItem('userPoolId');\n        const appClientId = localStorage.getItem('appClientId');\n\n        if (!userPoolId || !appClientId) {\n          return false;\n        }\n\n        const region = userPoolId?.split('_')[0];\n        const awsmobile = {\n          aws_project_region: region,\n          aws_cognito_region: region,\n          aws_user_pools_id: userPoolId,\n          aws_user_pools_web_client_id: appClientId\n        };\n        Amplify.configure(awsmobile);\n        return true;\n      } catch (err) {\n        console.error('Unable to initialize amplify auth.', err);\n        return false;\n      }\n    }\n\n    cleanLocalStorage() {\n      localStorage.removeItem('tenantName');\n      localStorage.removeItem('userPoolId');\n      localStorage.removeItem('appClientId');\n      localStorage.removeItem('apiGatewayUrl');\n    }\n\n  }\n\n  AuthConfigurationService.ɵfac = function AuthConfigurationService_Factory(t) {\n    return new (t || AuthConfigurationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthConfigurationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthConfigurationService,\n    factory: AuthConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthConfigurationService;\n})();","map":null,"metadata":{},"sourceType":"module"}