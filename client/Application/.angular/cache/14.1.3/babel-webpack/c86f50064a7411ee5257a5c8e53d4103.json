{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./../auth/auth-configuration.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nexport let UnauthorizedComponent = /*#__PURE__*/(() => {\n  class UnauthorizedComponent {\n    constructor(fb, authConfigService, _snackBar, router) {\n      this.fb = fb;\n      this.authConfigService = authConfigService;\n      this._snackBar = _snackBar;\n      this.router = router;\n      this.error = false;\n    }\n\n    ngOnInit() {\n      this.tenantForm = this.fb.group({\n        tenantName: [null, [Validators.required]]\n      });\n\n      if (localStorage.getItem('tenantName')) {\n        this.router.navigate(['/dashboard']);\n      }\n    }\n\n    isFieldInvalid(field) {\n      const formField = this.tenantForm.get(field);\n      return formField && formField.invalid && (formField.dirty || formField.touched);\n    }\n\n    displayFieldCss(field) {\n      return {\n        'is-invalid': this.isFieldInvalid(field)\n      };\n    }\n\n    hasRequiredError(field) {\n      return !!this.tenantForm.get(field)?.hasError('required');\n    }\n\n    openErrorMessageSnackBar(errorMessage) {\n      this._snackBar.open(errorMessage, 'Dismiss', {\n        duration: 4 * 1000 // seconds\n\n      });\n    }\n\n    login() {\n      let tenantName = this.tenantForm.value.tenantName;\n\n      if (!tenantName) {\n        this.errorMessage = 'No tenant name provided.';\n        this.error = true;\n        this.openErrorMessageSnackBar(this.errorMessage);\n        return false;\n      }\n\n      this.authConfigService.setTenantConfig(tenantName).then(val => {\n        this.router.navigate(['/dashboard']);\n      }).catch(errorResponse => {\n        this.error = true;\n        this.errorMessage = errorResponse.error.message || 'An unexpected error occurred!';\n        this.openErrorMessageSnackBar(this.errorMessage);\n      });\n      return false;\n    }\n\n  }\n\n  UnauthorizedComponent.ɵfac = function UnauthorizedComponent_Factory(t) {\n    return new (t || UnauthorizedComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthConfigurationService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.Router));\n  };\n\n  UnauthorizedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnauthorizedComponent,\n    selectors: [[\"app-unauthorized\"]],\n    decls: 19,\n    vars: 3,\n    consts: [[1, \"jumbotron\", \"jumbotron-fluid\", \"center-screen\"], [3, \"formGroup\", \"submit\"], [1, \"card\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"type\", \"tenantname\", \"id\", \"tenantname\", \"name\", \"tenantname\", \"formControlName\", \"tenantName\", \"placeholder\", \"Enter Tenant Name\", \"required\", \"\", 1, \"form-control\", 3, \"ngClass\"], [\"matSuffix\", \"\"], [1, \"button-panel\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n    template: function UnauthorizedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function UnauthorizedComponent_Template_form_submit_2_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(3, \"mat-card\", 2)(4, \"mat-card-title\");\n        i0.ɵɵtext(5, \"Unauthorized\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-card-subtitle\");\n        i0.ɵɵtext(7, \"Enter your tenant name and click submit below\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-card-content\")(9, \"mat-form-field\", 3)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Tenant Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 4);\n        i0.ɵɵelementStart(13, \"mat-icon\", 5);\n        i0.ɵɵtext(14, \"home\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"mat-card-actions\")(16, \"div\", 6)(17, \"button\", 7);\n        i0.ɵɵtext(18, \" Submit \");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.tenantForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngClass\", ctx.displayFieldCss(\"tenantName\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", !ctx.tenantForm.valid);\n      }\n    },\n    dependencies: [i5.NgClass, i6.MatButton, i7.MatCard, i7.MatCardContent, i7.MatCardTitle, i7.MatCardSubtitle, i7.MatCardActions, i8.MatIcon, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i9.MatFormField, i9.MatLabel, i9.MatSuffix, i10.MatInput],\n    styles: [\".center-screen[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}\"]\n  });\n  return UnauthorizedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}