{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Auth } from 'aws-amplify';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./views/auth/auth-configuration.service\";\nexport let CognitoGuard = /*#__PURE__*/(() => {\n  class CognitoGuard {\n    constructor(router, authConfigService) {\n      this.router = router;\n      this.authConfigService = authConfigService;\n    }\n\n    canActivate(route, state) {\n      if (!this.authConfigService.configureAmplifyAuth()) {\n        this.authConfigService.cleanLocalStorage();\n        this.router.navigate(['/unauthorized']);\n        return new Promise((res, rej) => {\n          res(false);\n        });\n      }\n\n      return Auth.currentSession().then(u => {\n        if (u.isValid()) {\n          return true;\n        } else {\n          this.authConfigService.cleanLocalStorage();\n          this.router.navigate(['/unauthorized']);\n          return false;\n        }\n      }).catch(e => {\n        if (state.url === '/dashboard') {\n          // if we're going to the dashboard and we're not logged in,\n          // don't stop the flow as the amplify-authenticator will\n          // route requests going to the dashboard to the sign-in page.\n          return true;\n        }\n\n        console.log('Error getting current session', e);\n        this.router.navigate(['/unauthorized']);\n        return false;\n      });\n    }\n\n  }\n\n  CognitoGuard.ɵfac = function CognitoGuard_Factory(t) {\n    return new (t || CognitoGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthConfigurationService));\n  };\n\n  CognitoGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CognitoGuard,\n    factory: CognitoGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return CognitoGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}